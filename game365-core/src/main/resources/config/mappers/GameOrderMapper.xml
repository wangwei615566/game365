<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wz.cashloan.core.mapper.GameOrderMapper" >
  <resultMap id="BaseResultMap" type="com.wz.cashloan.core.model.GameOrder" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="order_no" property="orderNo" jdbcType="VARCHAR" />
    <result column="game_bet_id" property="gameBetId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="score" property="score" jdbcType="DECIMAL" />
    <result column="clearing_score" property="clearingScore" jdbcType="DECIMAL" />
    <result column="result" property="result" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="state" property="state" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="over_state" property="overState" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, order_no, game_bet_id, user_id, score, type, state, create_time, update_time,clearing_score,result,over_state
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from game_order
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectMapByOrderNo" resultType="java.util.Map" parameterType="java.lang.String" >
     SELECT
        go.create_time,
        go.type,
        go.score,
        go.result,
        gb.`name`,
        gb.team,
        gb.odds
    FROM
        `game_order` go
    LEFT JOIN game_bet gb ON gb.id = go.game_bet_id
    WHERE
        go.order_no = #{orderNo,jdbcType=VARCHAR}
  </select>
  <select id="selectOrderByStateAndUserId" resultType="java.lang.String" parameterType="java.util.Map">
    SELECT DISTINCT
	t1.order_no
    FROM
        (
            SELECT
                order_no,
                create_time
            FROM
                `game_order`
            WHERE
                over_state = #{overState,jdbcType=VARCHAR}
            AND user_id = #{userId,jdbcType=BIGINT}
            GROUP BY
                order_no,
                create_time
            ORDER BY
                create_time DESC
        ) t1
  </select>
  <select id="pendingOrder" resultType="java.util.Map" parameterType="java.util.Map" >
    SELECT
        go.id AS orderId,
        go.order_no AS orderNo,
        go.score,
        gb.`name`,
        gb.odds,
        gb.team,
        g.id AS gameId,
        g.state AS gameState,
        g.left_score AS leftScore,
        g.left_team AS leftTeam,
        g.right_score AS rightScore,
        g.right_team AS rightTeam
    FROM
        game_order go
    LEFT JOIN game_bet gb ON gb.id = go.game_bet_id
    LEFT JOIN game g ON g.id = gb.game_id
    WHERE
        NOW() > CONCAT(
            g.contest_date,
            ' ',
            g.contest_time
        )
    AND go.state = '10'
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from game_order
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.wz.cashloan.core.model.GameOrder" >
    insert into game_order (id, order_no, game_bet_id, 
      user_id, score, type, 
      state, create_time, update_time,clearing_score,result,over_state
      )
    values (#{id,jdbcType=BIGINT}, #{orderNo,jdbcType=VARCHAR}, #{gameBetId,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{score,jdbcType=DECIMAL}, #{type,jdbcType=TINYINT}, 
      #{state,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
      #{clearingScore,jdbcType=DECIMAL},#{result,jdbcType=INTEGER},#{overState,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wz.cashloan.core.model.GameOrder" >
    insert into game_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="gameBetId != null" >
        game_bet_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="orderNo != null" >
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="gameBetId != null" >
        #{gameBetId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DECIMAL},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="state != null" >
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wz.cashloan.core.model.GameOrder" >
    update game_order
    <set >
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="gameBetId != null" >
        game_bet_id = #{gameBetId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DECIMAL},
      </if>
      <if test="clearingScore != null" >
        clearing_score = #{clearingScore,jdbcType=DECIMAL},
      </if>
      <if test="result != null" >
        result = #{result,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="overState != null" >
        over_state = #{overState,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wz.cashloan.core.model.GameOrder" >
    update game_order
    set order_no = #{orderNo,jdbcType=VARCHAR},
      game_bet_id = #{gameBetId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      score = #{score,jdbcType=DECIMAL},
      type = #{type,jdbcType=TINYINT},
      state = #{state,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="updateOverStateByOrderNo" parameterType="java.lang.String" >
    update game_order
    set over_state = '20'
    where order_no = #{orderNo,jdbcType=VARCHAR}
  </update>
  <select id="notOverOrderNo" resultType="java.util.Map"  >
    SELECT
	t1.userId,
	t1.order_no as orderNo
    FROM
        (
            SELECT
                MAX(user_id) as userId,
                order_no,
                GROUP_CONCAT(state) AS states
            FROM
                `game_order`
            WHERE
                over_state != 20
            GROUP BY
                order_no
        ) t1
    WHERE
        locate('10', states) = 0
  </select>

  <select id="calcScore" resultType="java.lang.Double" parameterType="java.lang.String">
    SELECT
        CASE
        WHEN MAX(go.type) = 1 THEN
            SUM(go.clearing_score)
        ELSE
            (
                CASE
                WHEN sum(go.result) = 0 THEN
                    sum(go.score) * SUM(gb.odds)
                ELSE
                    0
                END
            )
        END AS totalScore
    FROM
        game_order go
    LEFT JOIN game_bet gb ON gb.id = go.game_bet_id
    WHERE
	go.order_no = #{orderNo,jdbcType=VARCHAR}
  </select>
</mapper>