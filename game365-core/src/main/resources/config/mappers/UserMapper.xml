<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wz.cashloan.core.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.wz.cashloan.core.model.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="login_pwd" property="loginPwd" jdbcType="VARCHAR" />
    <result column="loginpwd_modify" property="loginpwdModify" jdbcType="TIMESTAMP" />
    <result column="invitation_code" property="invitationCode" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="register_client" property="registerClient" jdbcType="VARCHAR" />
    <result column="register_ip" property="registerIp" jdbcType="VARCHAR" />
    <result column="login_ip" property="loginIp" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, login_name, login_pwd, loginpwd_modify, invitation_code, level, register_client, 
    register_ip, login_ip, update_time, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user
    where login_name = #{loginName,jdbcType=VARCHAR}
  </select>
  <select id="listSelective" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user
  </select>
  <select id="userList" resultType="java.util.Map" parameterType="java.util.HashMap" >
    select
    u.id, u.login_name as loginName,u.invitation_code as invitationCode,u.register_client as registerClient,u.register_ip as registerIp, u.login_ip as loginIp,u.create_time as createTime,a.total,a.state
    from user u left join user_amount a on u.id=a.user_id
    <trim prefix="where" prefixOverrides="and|or">
      <if test="loginName != null and loginName != ''">
        u.login_name  = #{loginName,jdbcType=VARCHAR}
      </if>
    </trim>
  </select>
  <sql id="searchBy">
    <trim prefix="where" prefixOverrides="and|or">
      <if test="id != null and id != ''">
        id  = #{id,jdbcType=BIGINT}
      </if>
      <if test="loginName !=null and loginName != ''">
        and login_name = #{loginName,jdbcType=VARCHAR}
      </if>
      <if test="loginPwd !=null and loginPwd != ''">
        and login_pwd = #{loginPwd,jdbcType=VARCHAR}
      </if>
      <if test="loginpwdModifyTime != null">
        and loginpwd_modify_time = #{loginpwdModifyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="registerClient != null and registerClient != ''">
        and register_client = #{registerClient,jdbcType=VARCHAR}
      </if>
      <if test="state != null and state != ''">
        and state = #{state,jdbcType=TINYINT}
      </if>
      <if test="invitationCode != null and invitationCode != ''">
        and invitation_code = #{invitationCode,jdbcType=VARCHAR}
      </if>
      <if test="registerIp != null and registerIp != ''">
        and register_ip = #{registerIp,jdbcType=VARCHAR}
      </if>
      <if test="loginIp != null and loginIp != ''">
        and login_ip = #{loginIp,jdbcType=VARCHAR}
      </if>
    </trim>
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.wz.cashloan.core.model.User" useGeneratedKeys="true" keyProperty="id">
    insert into user (id, login_name, login_pwd, 
      loginpwd_modify, invitation_code, level, 
      register_client, register_ip, login_ip, 
      update_time, create_time)
    values (#{id,jdbcType=BIGINT}, #{loginName,jdbcType=VARCHAR}, #{loginPwd,jdbcType=VARCHAR}, 
      #{loginpwdModify,jdbcType=TIMESTAMP}, #{invitationCode,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, 
      #{registerClient,jdbcType=VARCHAR}, #{registerIp,jdbcType=VARCHAR}, #{loginIp,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.wz.cashloan.core.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="loginPwd != null" >
        login_pwd,
      </if>
      <if test="loginpwdModify != null" >
        loginpwd_modify,
      </if>
      <if test="invitationCode != null" >
        invitation_code,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="registerClient != null" >
        register_client,
      </if>
      <if test="registerIp != null" >
        register_ip,
      </if>
      <if test="loginIp != null" >
        login_ip,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null" >
        #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="loginpwdModify != null" >
        #{loginpwdModify,jdbcType=TIMESTAMP},
      </if>
      <if test="invitationCode != null" >
        #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="registerClient != null" >
        #{registerClient,jdbcType=VARCHAR},
      </if>
      <if test="registerIp != null" >
        #{registerIp,jdbcType=VARCHAR},
      </if>
      <if test="loginIp != null" >
        #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wz.cashloan.core.model.User" >
    update user
    <set >
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null" >
        login_pwd = #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="loginpwdModify != null" >
        loginpwd_modify = #{loginpwdModify,jdbcType=TIMESTAMP},
      </if>
      <if test="invitationCode != null" >
        invitation_code = #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="registerClient != null" >
        register_client = #{registerClient,jdbcType=VARCHAR},
      </if>
      <if test="registerIp != null" >
        register_ip = #{registerIp,jdbcType=VARCHAR},
      </if>
      <if test="loginIp != null" >
        login_ip = #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wz.cashloan.core.model.User" >
    update user
    set login_name = #{loginName,jdbcType=VARCHAR},
      login_pwd = #{loginPwd,jdbcType=VARCHAR},
      loginpwd_modify = #{loginpwdModify,jdbcType=TIMESTAMP},
      invitation_code = #{invitationCode,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      register_client = #{registerClient,jdbcType=VARCHAR},
      register_ip = #{registerIp,jdbcType=VARCHAR},
      login_ip = #{loginIp,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>